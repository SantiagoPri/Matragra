AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ApiStage:
    Type: String
    Default: api
    Description: proxy api stage
  LambdaCodeBucket:
    Type: String
    Default: matragra-lambda-code
    Description: Globally used bucket for lambda code
    AllowedValues:
      - matragra-lambda-code

Resources:
  #IAM resources
  StackRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "stack_${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "stack_${AWS::StackName}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource:
                  - !Sub "${MatragraDynamoDB.Arn}"
                  - !Sub "${MatragraDynamoDB.Arn}/index/*"
                  - !Sub "${MatragraProjectsDynamoDB.Arn}"
                  - !Sub "${MatragraProjectsDynamoDB.Arn}/index/*"
                  - !Sub "${MatragraForosDynamoDB.Arn}"
                  - !Sub "${MatragraForosDynamoDB.Arn}/index/*"
                  - !Sub "${MatragraEventsDynamoDB.Arn}"
                  - !Sub "${MatragraEventsDynamoDB.Arn}/index/*"
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Sub "arn:aws:execute-api:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Scan
                  - dynamodb:ListShards
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MatragraEventsDynamoDB}/stream/*'

  ApiGatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "stack_${AWS::StackName}-api"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource:
                  - !GetAtt MatragraAPILambda.Arn
                  # - !GetAtt WebsocketAPILambda.Arn

  # Dynamodb resources
  MatragraDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: inverted_index
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  MatragraProjectsDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}_projects"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: inverted_index
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  MatragraForosDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}_foros"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: inverted_index
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  MatragraEventsDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}_events"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: inverted_index
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ## START OF API-PROXY RESOURCES
  ProxyApiGatewayKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties:
      Description: !Sub "Proxy API Key for ${AWS::StackName}"
      Enabled: true
      GenerateDistinctId: false
      Name: !Sub "${AWS::StackName}-proxy"

  ProxyApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        - ApiId: !Ref ProxyRestAPIv2
          Stage: !Ref ApiStage
      Description: !Sub "Usage plan for Proxy API ${AWS::StackName}"
      UsagePlanName: !Sub "${AWS::StackName}-unlimited-plan-proxy-api"
    DependsOn: ProxyApiDeploymentx

  ProxyApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ProxyApiGatewayKey
      KeyType: API_KEY
      UsagePlanId: !Ref ProxyApiUsagePlan

  ProxyApiDeploymentx:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ProxyRestAPIv2
      StageName: !Ref ApiStage

  ProxyRestAPIv2:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "Proxy to Lambda Express API"
      MinimumCompressionSize: 0
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        openapi: 3.0.0
        info:
          version: 0.0.1
          title: !Sub ${AWS::StackName}_proxy
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              description: "Any HTTP method to App Express Lambda"
              # security:
              #   - proxy_api_key: []
              responses:
                "200":
                  description: "OK"
                "400":
                  description: "Bad request"
                "401":
                  description: "Bad signature"
                "404":
                  description: "Not found"
                "500":
                  description: "Internal server error"
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                credentials: !GetAtt ApiGatewayIAMRole.Arn
                passthroughBehavior: when_no_match
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MatragraAPILambda.Arn}/invocations"
                responses:
                  '2\d{2}':
                    statusCode: "200"
                  "400":
                    statusCode: "400"
                  "401":
                    statusCode: "401"
                  '4\d[2-9]':
                    statusCode: "404"
                  '5\d{2}':
                    statusCode: "500"
        components:
          securitySchemes:
            proxy_api_key:
              type: apiKey
              name: x-api-key
              in: header
  ## END OF API-PROXY RESOURCES

  # ## START OF API-WEBSOCKET RESOURCES
  # WebSocketAPI1:
  #   Type: "AWS::ApiGatewayV2::Api"
  #   Properties:
  #     Name: WebSocketAPI
  #     ProtocolType: WEBSOCKET
  #     RouteSelectionExpression: $request.body.action

  # WebSocketLambdaIntegration:
  #   Type: "AWS::ApiGatewayV2::Integration"
  #   Properties:
  #     ApiId: !Ref WebSocketAPI1
  #     Description: Lambda Integration
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Join
  #       - ""
  #       - - "arn:"
  #         - !Ref "AWS::Partition"
  #         - ":apigateway:"
  #         - !Ref "AWS::Region"
  #         - ":lambda:path/2015-03-31/functions/"
  #         - !GetAtt WebsocketAPILambda.Arn
  #         - /invocations
  #     CredentialsArn: !GetAtt ApiGatewayIAMRole.Arn
  #     #IntegrationMethod: POST #FIXME: puede que esto no valla
  #     PassthroughBehavior: WHEN_NO_MATCH

  # WebSocketLambdaIntegrationResponse:
  #   Type: "AWS::ApiGatewayV2::IntegrationResponse"
  #   Properties:
  #     IntegrationId: !Ref WebSocketLambdaIntegration
  #     IntegrationResponseKey: /400/
  #     ApiId: !Ref WebSocketAPI1

  # DefaultRoute:
  #   Type: "AWS::ApiGatewayV2::Route"
  #   DependsOn:
  #     - WebSocketLambdaIntegration
  #     - WebSocketLambdaIntegrationResponse
  #   Properties:
  #     ApiId: !Ref WebSocketAPI1
  #     RouteKey: $default
  #     RouteResponseSelectionExpression: $default
  #     AuthorizationType: NONE #TODO: this can be JWT to be review
  #     Target: !Join
  #       - /
  #       - - integrations
  #         - !Ref WebSocketLambdaIntegration
  #         - !Ref WebSocketLambdaIntegrationResponse

  # ConnectRoute:
  #   Type: "AWS::ApiGatewayV2::Route"
  #   DependsOn:
  #     - WebSocketLambdaIntegration
  #     - WebSocketLambdaIntegrationResponse
  #   Properties:
  #     ApiId: !Ref WebSocketAPI1
  #     RouteKey: $connect 
  #     RouteResponseSelectionExpression: $default
  #     AuthorizationType: NONE #TODO: this can be JWT to be review
  #     Target: !Join
  #       - /
  #       - - integrations
  #         - !Ref WebSocketLambdaIntegration
  #         - !Ref WebSocketLambdaIntegrationResponse

  # DisconnectRoute:
  #   Type: "AWS::ApiGatewayV2::Route"
  #   DependsOn:
  #     - WebSocketLambdaIntegration
  #     - WebSocketLambdaIntegrationResponse
  #   Properties:
  #     ApiId: !Ref WebSocketAPI1
  #     RouteKey: $disconnect 
  #     RouteResponseSelectionExpression: $default
  #     AuthorizationType: NONE #TODO: this can be JWT to be review
  #     Target: !Join
  #       - /
  #       - - integrations
  #         - !Ref WebSocketLambdaIntegration
  #         - !Ref WebSocketLambdaIntegrationResponse

  # ProdStage:
  #   Type: "AWS::ApiGatewayV2::Stage"
  #   Properties:
  #     StageName: Prod
  #     Description: Prod Stage
  #     AutoDeploy: true
  #     ApiId: !Ref WebSocketAPI1

  # WebSocketAPIDeployment1:
  #   Type: "AWS::ApiGatewayV2::Deployment"
  #   DependsOn:
  #     - DefaultRoute
  #     - ConnectRoute
  #     - DisconnectRoute
  #   Properties:
  #     Description: Deployment for the WebSocket api
  #     ApiId: !Ref WebSocketAPI1
  #     StageName: !Ref ProdStage
  # ## END OF API-WEBSOCKET RESOURCES

  ## START OF API RESOURCES
  MatragraAPILambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}_api-handler"
      Description: "Manage the CRUD operations for the dynamoDB by the api"
      Handler: App/index.handler
      Role: !GetAtt StackRole.Arn
      MemorySize: 128
      Timeout: 90
      Runtime: nodejs12.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub "${AWS::StackName}.zip"
      Environment:
        Variables:
          MATRAGRA_DYNAMODB: !Ref MatragraDynamoDB
          MATRAGRA_PROJECTS_DYNAMODB: !Ref MatragraProjectsDynamoDB
          MATRAGRA_FOROS_DYNAMODB: !Ref MatragraForosDynamoDB
          MATRAGRA_EVENTS_DYNAMODB: !Ref MatragraEventsDynamoDB
          API_KEY: !Ref ProxyApiGatewayKey

  MatragraEmailSenderLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}_email-sender"
      Description: "To send emails service"
      Handler: lambda/emailSender.handler
      Role: !GetAtt StackRole.Arn
      MemorySize: 128
      Timeout: 90
      Runtime: nodejs12.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub "${AWS::StackName}.zip"
      Environment:
        Variables:
          MATRAGRA_DYNAMODB: !Ref MatragraDynamoDB
          MATRAGRA_PROJECTS_DYNAMODB: !Ref MatragraProjectsDynamoDB
          MATRAGRA_FOROS_DYNAMODB: !Ref MatragraForosDynamoDB
          MATRAGRA_EVENTS_DYNAMODB: !Ref MatragraEventsDynamoDB
          API_KEY: !Ref ProxyApiGatewayKey

  MatragraEmailSenderSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - MatragraEventsDynamoDB
      - MatragraEmailSenderLambda
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt MatragraEventsDynamoDB.StreamArn
      FunctionName: !Ref MatragraEmailSenderLambda
      MaximumRetryAttempts: 3
      StartingPosition: LATEST

  QueueApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref MatragraAPILambda
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProxyRestAPIv2}/*"

  # WebsocketAPILambda:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     FunctionName: !Sub "${AWS::StackName}_WebSocket-handler"
  #     Description: "Manage the notifications and the chat"
  #     Handler: WebSocket/lambda/default.handler
  #     Role: !GetAtt StackRole.Arn
  #     MemorySize: 128
  #     Timeout: 90
  #     Runtime: nodejs12.x
  #     Code:
  #       S3Bucket: !Ref LambdaCodeBucket
  #       S3Key: !Sub "${AWS::StackName}.zip"
  #     Environment:
  #       Variables:
  #         MATRAGRA_DYNAMODB: !Ref MatragraDynamoDB
  #         API_KEY: !Ref ProxyApiGatewayKey

  # WebSocketApiInvokePermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: "lambda:InvokeFunction"
  #     FunctionName: !Ref WebsocketAPILambda
  #     Principal: "apigateway.amazonaws.com"
  #     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI1}/*"
  ## END OF API RESOURCES


Outputs:
  MatragraApiUrl:
    Description: Sku Conversion API Url.
    Value: !Sub "https://${ProxyRestAPIv2}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}"
    Export:
      Name: !Sub ${AWS::StackName}::api-url
  MatragraApiKey:
    Description: Sku Conversion API key.
    Value: !Ref ProxyApiGatewayKey
    Export:
      Name: !Sub ${AWS::StackName}::api-key
